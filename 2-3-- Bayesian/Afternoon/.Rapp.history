load("/Users/noble/2016_class_CMR/2-3-- Bayesian/Afternoon/Lab3.rdata")
###### Discrete distributions#
#
#Bernoulli#
#
# simulate example data - Bernoulli random variables of 1 and 0#
p<- 0.7#
Success = rbinom(100, size=1, prob = p)   #
#
# Plot example data#
hist(Success)#
#
#use a link function and simulate some Bernoulli RV as function of covariate:#
#
#Build a generalized linear model (GLM)#
#
#define inverse logit function to make it easier, plus see how to use functions in R#
in.logit<- function(x){#
	exp(x)/(1 + exp(x))#
}#
#
x.cov<- rnorm(100)  #100 random normal values#
p2<- in.logit(1.0 + 2*x.cov)#
Success2<- rbinom(100, size=1, prob = p2)#
#
#plot p relative to x values#
plot(x.cov, p2, ylab = "Probability", xlab = "Covariate Value", ylim = c(0,1))#
#add points for observed data#
points(x.cov, Success2, pch = 15)#
#
#output plot to use later in a presentation#
png(file="Lab1_success.png", width=4, height=4, res=200, units="in")#
plot(x.cov, p2, ylab = "Probability", xlab = "Covariate Value", ylim = c(0,1))#
#add points for observed data#
points(x.cov, Success2, pch = 15)#
#also add a line for the underlying relationship#
ordered.x<- seq(-3,3, by = 0.01)#
lines(ordered.x, in.logit(1.0 + 2*ordered.x), col = "red", lwd = 3)#
#
dev.off()#
#Estimation - fit model in R using glm()#
Data2<- data.frame(Y=Success2, X = x.cov)#
fit.bern<-glm(Y~X, family = binomial, data = Data2)#
summary(fit.bern)#
#
#develop predictions for the observed data over the range of X covariates - ordered.x#
#
the.new.data<- list(X = ordered.x )#
pred.bern<- predict(fit.bern, type = "link", se.fit = T, newdata = the.new.data)#
#
#plot the predicted relationship - predictions on linear scale, so use in.logit to transform to the 0 to 1 scale#
plot(ordered.x, in.logit(pred.bern$fit), type = 'l', xlab = "X", ylab = "Probability", col = "blue")#
#add 95% Confidence Intervals#
lines(ordered.x, in.logit(pred.bern$fit + 1.96*pred.bern$se), lty = 2, col = "blue")#
lines(ordered.x, in.logit(pred.bern$fit - 1.96*pred.bern$se), lty = 2, col = "blue")#
#add the observed data#
points(x.cov, Success2, pch = 15)#
#add true relationship#
lines(ordered.x, in.logit(1.0 + 2*ordered.x), col = "red", lwd = 3)#
#Method 3 - fit model in JAGS#
install.library("R2jags")#
library(R2jags)#
#
# Specify model in BUGS language#
sink("GLM_Bern.jags")#
cat("#
model {#
#
# Priors#
alpha ~ dunif(-10, 10)#
beta ~ dunif(-10, 10)#
#
# Likelihood: #
for (i in 1:n){#
   logit.p[i] <- alpha + beta * X[i]    # 1. Linear predictor#
   logit(p[i]) <- logit.p[i] 			# 2. Link function#
   Y[i] ~ dbin(p[i],1)          		# 3. Distribution for random part #
   } #i#
}#
",fill = TRUE)#
sink()#
#
#Steps for JAGS run:#
# 1.Bundle data#
win.data <- list(Y = Data2$Y, n = length(Data2$Y), X = Data2$X, new.x = ordered.x )#
#
# Initial values#
inits <- function() list(alpha = runif(1, -2, 2), beta = runif(1, -3, 3))#
#
# Parameters monitored#
params <- c("alpha", "beta")#
#
# MCMC settings#
ni <- 5000  #length of chain#
nt <- 2		#thinning #
nb <- 1000   #burn in#
nc <- 3		#number of chains#
#
# Call JAGS from R#
bern.jags <- jags(data = win.data, inits = inits, parameters.to.save = params, model.file = "GLM_Bern.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb) #working.directory = getwd())
bern.jags
sink("GLM_Bern2.jags")#
cat("#
model {#
#
# Priors#
alpha ~ dunif(-10, 10)#
beta ~ dunif(-10, 10)#
#
# Likelihood: #
for (i in 1:n){#
   logit.p[i] <- alpha + beta * X[i]    # 1. Linear predictor#
   logit(p[i]) <- logit.p[i] 			# 2. Link function#
   Y[i] ~ dbin(p[i],1)          		# 3. Distribution for random part#
   logit(p.new[i]) <- alpha + beta * X[i]#
   }#
   for(j in 1:m){#
   		logit(p.pred[j]) <- alpha + beta*X.pred[j]#
   }#
}#
",fill = TRUE)#
sink()
win.data <- list(Y = Data2$Y, n = length(Data2$Y), X = Data2$X, X.pred = X.pred, m = length(X.pred) )#
#
# Initial values#
inits <- function() list(alpha = runif(1, -2, 2), beta = runif(1, -3, 3))#
#
# Parameters monitored#
params <- c("alpha", "beta", "p.pred")#
#
# MCMC settings#
ni <- 5000  #length of chain#
nt <- 2		#thinning #
nb <- 1000   #burn in#
nc <- 3		#number of chains#
#
# Call JAGS from R#
bern2.jags <- jags(data = win.data, inits = inits, parameters.to.save = params, model.file = "GLM_Bern2.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb) #working.directory = getwd())
X.pred<- seq(-3, 3, length = 9)
win.data <- list(Y = Data2$Y, n = length(Data2$Y), X = Data2$X, X.pred = X.pred, m = length(X.pred) )#
#
# Initial values#
inits <- function() list(alpha = runif(1, -2, 2), beta = runif(1, -3, 3))#
#
# Parameters monitored#
params <- c("alpha", "beta", "p.pred")#
#
# MCMC settings#
ni <- 5000  #length of chain#
nt <- 2		#thinning #
nb <- 1000   #burn in#
nc <- 3		#number of chains#
#
# Call JAGS from R#
bern2.jags <- jags(data = win.data, inits = inits, parameters.to.save = params, model.file = "GLM_Bern2.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb) #working.directory = getwd())
bern2.mcmc<- as.mcmc(bern2.jags)#
#get output from the JAGS model	- also uses a mcmc.list object#
bern2.sum<- summary(bern2.mcmc)
bern2.sum$statistics
bern2.sum$quantile
#Make a plot of the data and the model estimates#
par(mfrow = c(1,1))#
plot(Data2$X, Data2$Y, pch = 15, xlab = "X value", ylab = "Proportion")
lines(X.pred, bern2.sum$quantile[4:12,3], lwd = 2, col = 2)#
lines(X.pred, bern2.sum$quantile[4:12,1], lwd = 2, col = 2, lty = 3)#
lines(X.pred, bern2.sum$quantile[4:12,5], lwd = 2, col = 2, lty = 3)
